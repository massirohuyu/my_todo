tasks
  div if="{ opts.task_list }"
    h3
      | { opts.task_list.name }
    form onsubmit="{ add }"
      input type="text" name="name" onkeyup="{ input }"
      br
      textarea name="memo" onkeyup="{ input }" rows="3"
      button add
    ul
      li each="{ task, i in opts.task_list.tasks }"
        div if="{ !task.is_editing }"
          label class="{ done: task.done }"
            input type="checkbox" checked="{ task.done }" onclick="{ toggle }"
              | { task.name } （{ task.memo }）
          button type="button" onclick="{ toggle_editing }" edit
          button type="button" onclick="{ delete }" delete
        form if="{ task.is_editing }" onsubmit="{ edit }"
          input type="text" name="name" value="{ task.name }"
          textarea name="memo" value="{ task.memo }" rows="3"
          button ok
          button type="button" onclick="{ delete }" delete
          button type="button" onclick="{ toggle_editing }" cancel

  scss:
    .done {
      text-decoration: line-through;
    }
  
  javascript:
    this.task_list = opts.task_list;
    this.tasks = riot.collections.tasks;
    this.new_task = {};
  
    var self = this;
    
    input(e) {
      self.new_task[e.target.name] = e.target.value;
    }
    
    add(e) {
      var params = self.new_task;
      params.task_list_id = self.opts.task_list.id;

      self.tasks.trigger('post', {task: params}, function(){
        self.trigger('changed');
      });
    }

    toggle(e) {
      var task = e.item.task
      task.done = !task.done
      
      self.tasks.trigger('patch', task.id, {task: task});
      return true
    }

    toggle_editing(e) {
      var task = e.item.task
      task.is_editing = !task.is_editing;
    }

    edit(e) {
      var task = e.item.task
      task.is_editing = false;
      
      var form = e.srcElement,
          params = _.reduce(form, function(params, elem){
            if ( elem.name ) {
              params[elem.name] = elem.value;
              task[elem.name] = elem.value;
            }
            return params
          }, {});

      self.tasks.trigger('patch', task.id, {task: params});
    }

    delete(e){
      var task = e.item.task;
      
      if ( confirm('削除しますか？') ) {
        self.tasks.trigger('delete', task.id, function(){
          self.trigger('changed');
        });
      }
    }

    self.on('changed', function(){ //親の力を借りずに更新したい…
      if(self.opts.task_list) {
        self.parent.task_lists.trigger('get_one', self.opts.task_list.id, function(task_list){
          self.parent.selected_task_list = task_list;
          self.parent.update();
        });
      }
    });