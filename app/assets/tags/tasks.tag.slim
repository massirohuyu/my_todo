tasks.tasks
  div if="{ task_list }"
    h3.tasks__title
      i.fa.fa-list
      |  { task_list.name }

    form.tasks__add-form onsubmit="{ add }"
      input.input type="text" name="name" value="{ new_task.name }"
      textarea.input.m-t-10 name="memo" rows="3" if="{ detail_is_shown }"
        | { new_task.memo }

      .tasks__add-form__btns
        button.btn type="button" onclick="{ toggle_detail_shown }"
          i.fa.fa-chevron-circle-down if="{ !detail_is_shown }"
          i.fa.fa-chevron-circle-up if="{ detail_is_shown }"
          |  Detail

        button.btn
          i.fa.fa-plus
          |  Add

    button.btn.u-mgb-10 type="button" onclick="{ toggle_done_shown }"
      i.fa.fa-eye
      |  Show done

    ul.tasks__lists
      li.tasks__list each="{ task in task_list.tasks }" show="{ !task.done || done_is_shown }"
        div if="{ !task.is_editing }"
          label.tasks__list__label class="{ done: task.done }"
            input.tasks__list__checkbox type="checkbox" checked="{ task.done }" onclick="{ toggle }"
              | { task.name }
              span.task__list__memo show="{ task.memo }"
                | - { task.memo }

          .tasks__list__btns
            button.btn type="button" onclick="{ toggle_editing }"
              i.fa.fa-pencil

            button.btn type="button" onclick="{ delete }"
              i.fa.fa-trash

        form.tasks__list__edit-form if="{ task.is_editing }" onsubmit="{ edit }"
          input.input type="text" name="name" value="{ task.name }"
          textarea.input name="memo" value="{ task.memo }" rows="3"
          .tasks__list__edit-form__btns
            button.btn
              i.fa.fa-check
              |  Edit

            button.btn type="button" onclick="{ delete }"
              i.fa.fa-trash
              |  Delete

            button.btn type="button" onclick="{ toggle_editing }"
              i.fa.fa-times
              |  Close

      li.tasks__list if="{ false }"
        .tasks__list__label No tasks.



  javascript: // ------------------------------------------------------------

    var self = this;

    // ==============================================================
    // Initialize when mount
    // ==============================================================

    self.on('mount', function(){

      self.task_lists = riot.collections.task_lists;  // task_listコレクション
      self.task_list = opts.task_list;                // 選択中のtask_list
      self.tasks = riot.collections.tasks;            // taskコレクション
      self.detail_is_shown = false;                   // 追加フォームを詳細モードにするかどうか
      self.done_is_shown = false;                     // doneタスクを表示するかどうか
      self.new_task = {};                             // 追加フォームのデータ

    });

    // ==============================================================
    // Methods
    // ==============================================================

    // add-form actions
    // ------------------------------

    toggle_detail_shown(e) {
      self.detail_is_shown = !self.detail_is_shown;
    }
    
    add(e) {
      for(var i = 0; i < e.srcElement.length; i++) {
        if ( e.target[i].name ) {
          self.new_task[e.target[i].name] = e.target[i].value;
        }
      }
      var params = self.new_task;
      params.task_list_id = self.task_list.id;

      self.tasks.trigger('post', {task: params}, function(){
        self.new_task = {};
        self.trigger('changed');
      });
    }

    // show-done-button actions
    // ------------------------------

    toggle_done_shown(e) {
      self.done_is_shown = !self.done_is_shown;
    }

    // tasks lists actions
    // ------------------------------

    toggle(e) {
      var task = e.item.task
      task.done = !task.done
      
      self.tasks.trigger('patch', task.id, {task: task}, function(){
        self.trigger('changed');
      });
      return true
    }

    toggle_editing(e) {
      var task = e.item.task
      task.is_editing = !task.is_editing;
    }

    edit(e) {
      var task = e.item.task
      task.is_editing = false;
      
      var form = e.srcElement,
          params = _.reduce(form, function(params, elem){
            if ( elem.name ) {
              params[elem.name] = elem.value;
              task[elem.name] = elem.value;
            }
            return params
          }, {});

      self.tasks.trigger('patch', task.id, {task: params});
    }

    delete(e){
      var task = e.item.task;
      
      if ( confirm('削除しますか？') ) {
        self.tasks.trigger('delete', task.id, function(){
          self.trigger('changed');
        });
      }
    }

    // ==============================================================
    // Events
    // ==============================================================

    self.on('changed', function(){
      if(self.task_list) {
        self.task_lists.trigger('get_one', self.task_list.id, function(task_list){
          
          self.update({ task_list: task_list });
        });
      }
    });
    
    riot.event.on('change_selected_task_list', function(selected_task_list) {
      self.new_task = {};
      self.update({ task_list: selected_task_list });
    });